---
source: tests/ui.rs
expression: test_mini_c(file_contents)
---
Program(
  preamble: true,
  declarations: [
    Variable(VariableDeclaration(Int, [
      Normal("total"),
    ])),
    Variable(VariableDeclaration(Int, [
      Normal("quarter"),
      Normal("dime"),
      Normal("nickel"),
    ])),
    Function(FunctionDeclaration(Int, "main", [], Some(Scope([], [
      Expression(Assignment(AssignmentExpression(Normal("total"), Value(Int(100))))),
      Expression(Assignment(AssignmentExpression(Normal("quarter"), Value(Int(25))))),
      Expression(Assignment(AssignmentExpression(Normal("dime"), Value(Int(10))))),
      Expression(Assignment(AssignmentExpression(Normal("nickel"), Value(Int(5))))),
      For(ForStatement((None, Some(Binary(BinaryExpression(VariableReference(Normal("total")), NotEquals, Value(Int(0))))), None), Scope([], [
        If(IfStatement(Binary(BinaryExpression(VariableReference(Normal("total")), Less, Value(Int(5)))), Scope([], [
          Break,
        ]), None)),
        If(IfStatement(Binary(BinaryExpression(VariableReference(Normal("total")), Greater, Binary(BinaryExpression(VariableReference(Normal("quarter")), Sub, Value(Int(1)))))), Scope([], [
          Expression(Assignment(AssignmentExpression(Normal("total"), Binary(BinaryExpression(VariableReference(Normal("total")), Sub, VariableReference(Normal("quarter"))))))),
        ]), Some(Scope([], [
          If(IfStatement(Binary(BinaryExpression(VariableReference(Normal("total")), Greater, Binary(BinaryExpression(VariableReference(Normal("dime")), Sub, Value(Int(1)))))), Scope([], [
            Expression(Assignment(AssignmentExpression(Normal("total"), Binary(BinaryExpression(VariableReference(Normal("total")), Sub, VariableReference(Normal("dime"))))))),
          ]), Some(Scope([], [
            If(IfStatement(Binary(BinaryExpression(VariableReference(Normal("total")), Greater, Binary(BinaryExpression(VariableReference(Normal("nickel")), Sub, Value(Int(1)))))), Scope([], [
              Expression(Assignment(AssignmentExpression(Normal("total"), Binary(BinaryExpression(VariableReference(Normal("total")), Sub, VariableReference(Normal("nickel"))))))),
            ]), None)),
          ])))),
        ])))),
      ]))),
      Expression(FunctionCall(FunctionCallExpression("putint", [
        VariableReference(Normal("total")),
      ]))),
      Expression(FunctionCall(FunctionCallExpression("putnewline", []))),
      Return(ReturnStatement(Some(Value(Int(0))))),
    ])))),
  ],
)
