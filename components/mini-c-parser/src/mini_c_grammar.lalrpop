use std::str::FromStr;

use mini_c_ast::{
    BinaryOperator, UnaryOperator, Expression, Ident, Span, Spanned, Statement, Value,
};
use mini_c_lexer::Token;

grammar<'input>(input: &'input str);

pub Program = Preamble? Declaration*;

Preamble: () = "#include" "minicio.h" => ();
Declaration: () = {
    VariableDeclaration,
    FunctionDeclaration,
};
VariableDeclaration: () = VarType ListOf<Ident> ";";
FunctionDeclaration: () = ReturnType Ident "(" FunctionParameters ")" Scope;

// Statement = {
//     EmptyStatement,
//     // ExpressionStatement,
//     // LetStatement,
// };
// EmptyStatement: Statement = ";" => Statement::Empty;
// ExpressionStatement: Statement = <Spanned<Expression>> ";" => Statement::Expression(<>);
// LetStatement: Statement = "let" <Spanned<Ident>> "=" <Spanned<Expression>> ";" => Statement::Let(<>);

// // Chain of rules that define the precedence
// pub Expression = Equality;
// Equality = BinaryOperatorLevel<EqualityOperator, Comparison>;
// Comparison = BinaryOperatorLevel<ComparisonOperator, Term>;
// Term = BinaryOperatorLevel<TermOperator, Factor>;
// Factor = BinaryOperatorLevel<FactorOperator, Unary>;
// Unary = {
//     <op:Spanned<UnaryOperator>> <expr:Spanned<Unary>> => Expression::Unary(op, box expr),
//     Grouping,
// };
// Grouping = {
//     "(" <Expression> ")",
//     FunctionCall,
// };
// FunctionCall = {
//     <Spanned<Ident>> "(" <ListOf<Spanned<Expression>>> ")" => Expression::FunctionCall(<>),
//     Primary,
// };
// Primary: Expression = {
//     Spanned<Ident> => Expression::Variable(<>),
//     Literal => Expression::Literal(<>),
// };




// Literal: Spanned<Value> = {
//     Spanned<Int>,
//     Spanned<Bool>,
// };
// Ident: Ident = "{ident}" => <>.to_owned();
// Int: Value = "{int}" => Value::Int(i32::from_str(<>).unwrap());
// Bool: Value = {
//     "true" => Value::Bool(true),
//     "false" => Value::Bool(false),
// };


// EqualityOperator: BinaryOperator = {
//     "==" => BinaryOperator::Equals,
//     "!=" => BinaryOperator::NotEquals,
// };
// ComparisonOperator: BinaryOperator = {
//     "<" => BinaryOperator::Less,
//     "<=" => BinaryOperator::LessOrEquals,
//     ">" => BinaryOperator::Greater,
//     ">=" => BinaryOperator::GreaterOrEquals,
// };
// TermOperator: BinaryOperator = {
//     "+" => BinaryOperator::Add,
//     "-" => BinaryOperator::Subtract,
// };
// FactorOperator: BinaryOperator = {
//     "*" => BinaryOperator::Multiply,
//     "/" => BinaryOperator::Divide,
// };
// UnaryOperator: UnaryOperator = {
//     "not" => UnaryOperator::Not,
//     "-" => UnaryOperator::Minus,
// };

// // Macro: precedence level definition macro for binary expressions
// BinaryOperatorLevel<Operator, NextLevel>: Expression = {
//     <l:Spanned<BinaryOperatorLevel<Operator,NextLevel>>> <op:Spanned<Operator>> <r:Spanned<NextLevel>> => Expression::Binary(box l, op, box r),
//     NextLevel,
// };


// Comma separated list of something
ListOf<T>: Vec<T> = {
    <mut list:(<T> ",")*> <last_element:T?> => match last_element {
        None => list,
        Some(last_element) => {
            list.push(last_element);
            list
        }
    }
};

// Macro: rule with span, requires the Rule name to be the same as the type
Spanned<Rule>: Spanned<Rule> = <l:@L> <inner:Rule> <r:@R> =>
    Spanned {
        inner,
        span: Span::new(l, r)
    };


extern {
    type Location = usize;
    type Error = ();

    enum Token<'input> {
        "{ident}" => Token::Ident(<&'input str>),
        "{int}" => Token::Int(<&'input str>),
        "#include" => Token::IncludeMinicio,
        "minicio.h" => Token::MinicioHeader,
        "return" => Token::Return,
        "true" => Token::True,
        "false" => Token::False,
        ";" => Token::SemiColon,
        "," => Token::Comma,
        "=" => Token::SingleEquals,
        "(" => Token::OpenParenthesis,
        ")" => Token::CloseParenthesis,
        "{" => Token::OpenBraces,
        "}" => Token::CloseBraces,
        "+" => Token::Plus,
        "-" => Token::Minus,
        "*" => Token::Star,
        "/" => Token::Slash,
        "<" => Token::Less,
        "<=" => Token::LessOrEqual,
        "==" => Token::DoubleEquals,
        "!=" => Token::NotEquals,
        ">" => Token::Greater,
        ">=" => Token::GreaterOrEqual,
    }
}
