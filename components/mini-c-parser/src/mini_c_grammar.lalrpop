use mini_c_ast::{
    AssignmentExpression,
    BinaryExpression,
    BinaryOperator,
    Declaration,
    Expression,
    ForStatement,
    FunctionCallExpression,
    FunctionDeclaration,
    Ident,
    IfStatement,
    Parameter,
    Program,
    ReturnStatement,
    Scope,
    Span,
    Spanned,
    Statement,
    Type,
    UnaryExpression,
    UnaryOperator,
    Value,
    VariableDeclaration,
    VariableReferenceExpression,
    WhileStatement,
};
use std::str::FromStr;
use mini_c_lexer::Token;
use crate::{error, MiniCParseError};

grammar<'input>(input: &'input str);

pub Program: Program =
    <preamble:Preamble?> <declarations:Declaration*> =>
        Program { preamble: preamble.is_some(), declarations};

Preamble: () = "#include" "minicio.h" => ();

Declaration: Declaration = {
    VariableDeclaration => Declaration::Variable(<>),
    FunctionDeclaration => Declaration::Function(<>),
};
VariableDeclaration: Vec<VariableDeclaration> =
    <typ:Type> <variable_declarations:NonEmptyListOf<VariableDeclarationItem>> ";" =>
        {
            variable_declarations
                .into_iter()
                .map(|(ident, array_len)| VariableDeclaration { typ, ident, array_len })
                .collect()
        };
VariableDeclarationItem: (Ident, Option<usize>) = {
    Ident => (<>, None),
    <ident:Ident> "[" <size:PositiveInt> "]" => (ident, Some(size)),
};
FunctionDeclaration: FunctionDeclaration = {
    <Type> <Ident> "(" <ListOf<Parameter>> ")" <Scope> => FunctionDeclaration(<>)
};

Parameter: Parameter = Type Ident => Parameter(<>);
Scope: Scope = "{" <vars:VariableDeclaration?> <statements:Statement*> "}" =>
    {
        Scope(vars.unwrap_or(vec![]), statements)
    };

Statement: Statement = {
    IfStatement => Statement::If(<>),
    ForStatement => Statement::For(<>),
    WhileStatement => Statement::While(<>),
    BreakStatement => Statement::Break,
    ReturnStatement => Statement::Return(<>),
    Scope => Statement::Scope(<>),
    ExpressionStatement => Statement::Expression(<>),
};
IfStatement: IfStatement = {
    "if" "(" <Expression> ")" <Scope> <("else" <Scope>)?> => IfStatement(<>),
};
ForStatement: ForStatement = "for" "(" <(<Expression?> ";" <Expression?> ";" <Expression?>)> ")" <Scope> => ForStatement(<>);
WhileStatement: WhileStatement = "while" "(" <Expression?> ")" <Scope> => WhileStatement(<>);
BreakStatement: () = "break" ";" => ();
ReturnStatement: ReturnStatement = "return" <Expression?> ";" => ReturnStatement(<>);
ExpressionStatement = <Expression> ";";

pub Expression = ExpressionPrecedenceStart;
// // Precedence:
// 9. =
// 8. ||
// 7. &&
// 6. !
// 5. == != < < = > > =
// 4. + binary -
// 3. * /
// 2. unary -
// 1. 10, true, a, a[i] f()  (expr)
ExpressionPrecedenceStart = AssignmentExpression;

AssignmentExpression = {
    <VariableReferenceExpression> "=" <AssignmentExpression> => Expression::Assignment(Box::new(AssignmentExpression(<>))),
    OrExpression,
};
OrExpression = BinaryOperationLevel<OrOperator, AndExpression>;
AndExpression = BinaryOperationLevel<AndOperator, NotExpression>;
NotExpression = UnaryOperationLevel<NotOperator, ComparisonExpression>;
ComparisonExpression = BinaryOperationLevel<ComparisonOperator, TermExpression>;
TermExpression = BinaryOperationLevel<TermOperator, FactorExpression>;
FactorExpression = BinaryOperationLevel<FactorOperator, NegationExpression>;
NegationExpression = UnaryOperationLevel<NegationOperator, PrimaryExpression>;

PrimaryExpression: Expression = {
    "(" <Expression> ")",
    ValueExpression => Expression::Value(<>),
    FunctionCallExpression => Expression::FunctionCall(<>),
    VariableReferenceExpression => Expression::VariableReference(Box::new(<>)),
};
FunctionCallExpression: FunctionCallExpression = <Ident> "(" <ListOf<Expression>> ")" => FunctionCallExpression(<>);
VariableReferenceExpression: VariableReferenceExpression = {
    Ident => VariableReferenceExpression::Normal(<>),
    <Ident> "[" <Expression> "]" => VariableReferenceExpression::Array(<>),
};


OrOperator: BinaryOperator = "||" => BinaryOperator::Or;
AndOperator: BinaryOperator = "&&" => BinaryOperator::And;
NotOperator: UnaryOperator = "!" => UnaryOperator::Not;
ComparisonOperator: BinaryOperator = {
    "==" => BinaryOperator::Equals,
    "!=" => BinaryOperator::NotEquals,
    "<" => BinaryOperator::Less,
    "<=" => BinaryOperator::LessOrEquals,
    ">" => BinaryOperator::Greater,
    ">=" => BinaryOperator::GreaterOrEquals,
};
TermOperator: BinaryOperator = {
    "+" => BinaryOperator::Add,
    "-" => BinaryOperator::Sub,
};
FactorOperator: BinaryOperator = {
    "*" => BinaryOperator::Mul,
    "/" => BinaryOperator::Div,
};
NegationOperator: UnaryOperator = "-" => UnaryOperator::Negative;

ValueExpression: Value = {
    Int => Value::Int(<>),
    Bool => Value::Bool(<>),
};
PositiveInt: usize = "{int}" =>? usize::from_str(<>)
    .map_err(|err| error(MiniCParseError::InvalidInteger(<>.to_owned(), err)));
Int: i64 = "{int}" =>? i64::from_str(<>)
    .map_err(|err| error(MiniCParseError::InvalidInteger(<>.to_owned(), err)));
Bool: bool = {
    "true" => true,
    "false" => false,
};

Type: Type = {
    "{ident}" =>? {
        match <> {
            "void" => Ok(Type::Void),
            "bool" => Ok(Type::Bool),
            "int" => Ok(Type::Int),
            _ => Err(error(MiniCParseError::InvalidType(<>.into()))),
        }
    },
};

Ident: Ident = "{ident}" => <>.to_owned();

// Macro: comma separated list of something
ListOf<T>: Vec<T> = {
    <mut list:(<T> ",")*> <last_element:T?> => match last_element {
        None => list,
        Some(last_element) => {
            list.push(last_element);
            list
        }
    }
};
NonEmptyListOf<T>: Vec<T> = {
    <mut list:(<T> ",")*> <last_element:T> ","? => {
        list.push(last_element);
        list
    }
};


// Macro: precedence level definition macro for binary expressions
BinaryOperationLevel<Operator, NextLevel>: Expression = {
    BinaryOperationLevel<Operator,NextLevel> Operator NextLevel => Expression::Binary(Box::new(BinaryExpression(<>))),
    NextLevel,
};

// Macro: precedence level definition macro for unary expressions
UnaryOperationLevel<Operator, NextLevel>: Expression = {
    <op:Operator> <r:UnaryOperationLevel<Operator,NextLevel>> => Expression::Unary(Box::new(UnaryExpression(<>))),
    NextLevel,
};

// Macro: rule with span, requires the Rule name to be the same as the type
Spanned<Rule>: Spanned<Rule> = <l:@L> <inner:Rule> <r:@R> =>
    Spanned {
        inner,
        span: Span::new(l, r)
    };


extern {
    type Location = usize;
    type Error = MiniCParseError;

    enum Token<'input> {
        "{ident}" => Token::Ident(<&'input str>),
        "{int}" => Token::Int(<&'input str>),
        "#include" => Token::IncludeMinicio,
        "minicio.h" => Token::MinicioHeader,
        "if" => Token::If,
        "else" => Token::Else,
        "for" => Token::For,
        "while" => Token::While,
        "break" => Token::Break,
        "return" => Token::Return,
        "true" => Token::True,
        "false" => Token::False,
        ";" => Token::SemiColon,
        "," => Token::Comma,
        "=" => Token::SingleEquals,
        "(" => Token::OpenParenthesis,
        ")" => Token::CloseParenthesis,
        "{" => Token::OpenBraces,
        "}" => Token::CloseBraces,
        "[" => Token::OpenBrackets,
        "]" => Token::CloseBrackets,
        "+" => Token::Plus,
        "-" => Token::Minus,
        "*" => Token::Star,
        "/" => Token::Slash,
        "&&" => Token::And,
        "||" => Token::Or,
        "!" => Token::Not,
        "<" => Token::Less,
        "<=" => Token::LessOrEqual,
        "==" => Token::DoubleEquals,
        "!=" => Token::NotEquals,
        ">" => Token::Greater,
        ">=" => Token::GreaterOrEqual,
    }
}
