use crate::{ast::Statement, lexer::Token};

grammar<'input>(input: &'input str);

pub Program = Statement*;

Statement = EmptyStatement;
EmptyStatement: Statement = ";" => Statement::Empty;

extern {
    type Location = usize;
    type Error = ();

    enum Token<'input> {
        IDENTIFIER => Token::Ident(<&'input str>),
        NUMBER => Token::Number(<&'input str>),
        "let" => Token::Let,
        "fn" => Token::Fn,
        "return" => Token::Return,
        "not" => Token::Not,
        "true" => Token::True,
        "false" => Token::False,
        ";" => Token::SemiColon,
        "," => Token::Comma,
        "=" => Token::SingleEquals,
        "(" => Token::OpenParenthesis,
        ")" => Token::CloseParenthesis,
        "{" => Token::OpenBracket,
        "}" => Token::CloseBracket,
        "+" => Token::Plus,
        "-" => Token::Minus,
        "*" => Token::Star,
        "/" => Token::Slash,
        "<" => Token::Less,
        "<=" => Token::LessOrEqual,
        "==" => Token::DoubleEquals,
        "!=" => Token::NotEquals,
        ">" => Token::Greater,
        ">=" => Token::GreaterOrEqual,
    }
}
